html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}html{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;-moz-box-sizing:inherit;box-sizing:inherit}html,body{height:100%;background:#fafafa;font-size:16px;font-family:"Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif;color:rgba(0,0,0,0.87);text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:rgba(0,0,0,0)}hr{margin-top:22px;margin-bottom:22px;margin-bottom:22px;border:0;border-top:1px solid #eee}a{cursor:pointer;color:#2196f3;text-decoration:none;}a:hover,a:focus{color:#0c81df}img{max-width:100%}.cf,.clearfix,.container{*zoom:1;}.cf:before,.clearfix:before,.container:before,.cf:after,.clearfix:after,.container:after{content:'';display:table}.cf:after,.clearfix:after,.container:after{clear:both}.container{*zoom:1;width:auto;max-width:90%;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.container:before,.container:after{content:'';display:table}.container:after{clear:both}.offcanvas,.offcanvas--open{width:18.75rem;height:100%;position:fixed;top:0;z-index:4;background:#8cc63f;box-shadow:0 6px 10px 0 rgba(0,0,0,0.3),0 2px 2px 0 rgba(0,0,0,0.2);-webkit-transform:translate(-300px);-ms-transform:translate(-300px);transform:translate(-300px);-webkit-transition:transform .2s $transition-bezier;transition:transform .2s $transition-bezier;}.offcanvas--open,.offcanvas--open--open{-webkit-transform:translate(0);-ms-transform:translate(0);transform:translate(0);-webkit-transition:transform .2s $transition-bezier;transition:transform .2s $transition-bezier}.header{*zoom:1;height:100vh;background:#fff;text-align:center;background:url("http://qbkl.net/themeforest/curriculum/assets/img/backstretch.jpg")}.header:before,.header:after{content:'';display:table}.header:after{clear:both}.header__line{width:100%;height:.1875rem;position:fixed;background:#f89c48}.header__logo{margin-top:3.125rem}.header__name{margin-top:.625rem;font:800 3.75rem "Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif;text-transform:uppercase;letter-spacing:.1875rem;line-height:6rem;color:#fff}.header__separator{width:18.75rem;height:.125rem;display:block;margin:0 auto;background:#fff}.header__motto{font:300 1.875rem "Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif;line-height:5rem;color:#fff}.main-menu{width:100%;height:3.75rem;margin-top:-3.75rem;background:#f89c48;text-align:center;}.main-menu ul{margin:0;list-style:none}.main-menu li{padding-left:20px;line-height:3.75rem;display:inline-block}.main-menu a{line-height:3.75rem;font:500 .9375rem "Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif;letter-spacing:.09375rem;text-transform:uppercase;color:#fff}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvcmVzZXQvbm9ybWFsaXplLnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL21peGlucy92ZW5kb3JzLWZsZXguc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvdXRpbGl0aWVzL292ZXJmbG93LnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL21peGlucy92ZW5kb3JzLnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL3Jlc2V0L2JveC1zaXppbmctcmVzZXQuc3R5bCIsImJhc2Uvc2NhZmZvbGRpbmcuc3R5bCIsImJhc2UvdXRpbGl0aWVzLnN0eWwiLCJzaGFtZS5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2plZXQvc3R5bHVzL2plZXQvX2dyaWQuc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvdXRpbGl0aWVzL2NsZWFyZml4LnN0eWwiLCJjb21wb25lbnRzL2dyaWQuc3R5bCIsImNvbXBvbmVudHMvb2ZmY2FudmFzLnN0eWwiLCJtaXhpbnMvc2l6ZS5zdHlsIiwibW9kdWxlcy9oZWFkZXIuc3R5bCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSSxLQUNJLFlBQVksV0FDWixxQkFBcUIsS0FDckIseUJBQXlCLEtBRTdCLEtBQ0ksT0FBTyxFQUVYLFFBQ0EsTUFDQSxRQUNBLFdBQ0EsT0FDQSxPQUNBLE9BQ0EsT0FDQSxLQUNBLElBQ0EsUUFDQSxRQ0VJLFFBQVEsTURDWixNQUNBLE9BQ0EsU0FDQSxNQ0pJLFFBQVEsYURNUixlQUFlLFNBRW5CLHNCQ1JJLFFBQVEsS0RVUixPQUFPLEVBRVgsU0FBUyxTQ1pMLFFBQVEsS0Rn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LFNBQVMsTUFDVCxXQUFXLFFBRWIsY0FDRSxXQUFtQixTQUVyQixjQUNFLFdBQW1CLFFBQ25CLEtBQUssdUVBQ0wsZUFBZSxVQUNmLGVBQXNCLFNBQ3RCLFlBQVksS0FDWixNQUFNLEtBRVIsbUJBQ0UsTUFBZSxTQUNmLE9BQWMsUVpKUixRQUFRLE1ZTWQsT0FBTyxPQUNQLFdBQVcsS0FFYixlQUNFLEtBQUssd0VBQ0wsWUFBWSxLQUNaLE1BQU0sS0FFUixXQUNFLE1BQU0sS0FDTixPQUFlLFFBQ2YsV0FBb0IsU0FDcEIsV0FBVyxRQUNYLFdBQVcsUUFFWCxjQUNFLE9BQU8sRUFDUCxXQUFXLEtBRWIsY0FDRSxhQUFhLEtBQ2IsWUFBb0IsUVozQmhCLFFBQVEsYVk4QmQsYUFDRSxZQUFvQixRQUNwQixLQUFLLHdFQUNMLGVBQXdCLFVBQ3hCLGVBQWUsVUFDZixNQUFNIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsia3Mtbm9ybWFsaXplKClcbiAgICBodG1sXG4gICAgICAgIGZvbnQtZmFtaWx5IHNhbnMtc2VyaWZcbiAgICAgICAgLW1zLXRleHQtc2l6ZS1hZGp1c3QgMTAwJVxuICAgICAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3QgMTAwJVxuXG4gICAgYm9keVxuICAgICAgICBtYXJnaW4gMFxuXG4gICAgYXJ0aWNsZVxuICAgIGFzaWRlXG4gICAgZGV0YWlsc1xuICAgIGZpZ2NhcHRpb25cbiAgICBmaWd1cmVcbiAgICBmb290ZXJcbiAgICBoZWFkZXJcbiAgICBoZ3JvdXBcbiAgICBtYWluXG4gICAgbmF2XG4gICAgc2VjdGlvblxuICAgIHN1bW1hcnlcbiAgICAgICAgZGlzcGxheSBibG9ja1xuXG4gICAgYXVkaW9cbiAgICBjYW52YXNcbiAgICBwcm9ncmVzc1xuICAgIHZpZGVvXG4gICAgICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG4gICAgICAgIHZlcnRpY2FsLWFsaWduIGJhc2VsaW5lXG5cbiAgICBhdWRpbzpub3QoW2NvbnRyb2xzXSlcbiAgICAgICAgZGlzcGxheSBub25lXG4gICAgICAgIGhlaWdodCAwXG5cbiAgICBbaGlkZGVuXSxcbiAgICB0ZW1wbGF0ZVxuICAgICAgICBkaXNwbGF5IG5vbmVcblxuICAgIGFcbiAgICAgICAgYmFja2dyb3VuZCB0cmFuc3BhcmVudFxuXG4gICAgYTphY3RpdmVcbiAgICBhOmhvdmVyXG4gICAgICAgIG91dGxpbmUgMFxuXG4gICAgYWJiclt0aXRsZV1cbiAgICAgICAgYm9yZGVyLWJvdHRvbSAxcHggZG90dGVkXG5cbiAgICBiXG4gICAgc3Ryb25nXG4gICAgICAgIGZvbnQtd2VpZ2h0IGJvbGRcblxuICAgIGRmblxuICAgICAgICBmb250LXN0eWxlIGl0YWxpY1xuXG4gICAgaDFcbiAgICAgICAgZm9udC1zaXplIDJlbVxuICAgICAgICBtYXJnaW4gMC42N2VtIDBcblxuICAgIG1hcmtcbiAgICAgICAgYmFja2dyb3VuZCAjZmYwXG4gICAgICAgIGNvbG9yICMwMDBcblxuICAgIHNtYWxsXG4gICAgICAgIGZvbnQtc2l6ZSA4MCVcblxuICAgIHN1YlxuICAgIHN1cFxuICAgICAgICBmb250LXNpemUgNzUlXG4gICAgICAgIGxpbmUtaGVpZ2h0IDBcbiAgICAgICAgcG9zaXRpb24gcmVsYXRpdmVcbiAgICAgICAgdmVydGljYWwtYWxpZ24gYmFzZWxpbmVcblxuICAgIHN1cFxuICAgICAgICB0b3AgLTAuNWVtXG5cbiAgICBzdWJcbiAgICAgICAgYm90dG9tIC0wLjI1ZW1cblxuICAgIGltZ1xuICAgICAgICBib3JkZXIgMFxuXG4gICAgc3ZnOm5vdCg6cm9vdClcbiAgICAgICAgb3ZlcmZsb3cgaGlkZGVuXG5cbiAgICBmaWd1cmVcbiAgICAgICAgbWFyZ2luIDFlbSA0MHB4XG5cbiAgICBoclxuICAgICAgICBib3gtc2l6aW5nIGNvbnRlbnQtYm94XG4gICAgICAgIGhlaWdodCAwXG5cbiAgICBwcmVcbiAgICAgICAgb3ZlcmZsb3cgYXV0b1xuXG4gICAgY29kZVxuICAgIGtiZFxuICAgIHByZVxuICAgIHNhbXBcbiAgICAgICAgZm9udC1mYW1pbHkgbW9ub3NwYWNlLCBtb25vc3BhY2VcbiAgICAgICAgZm9udC1zaXplIDFlbVxuXG4gICAgYnV0dG9uXG4gICAgaW5wdXRcbiAgICBvcHRncm91cFxuICAgIHNlbGVjdFxuICAgIHRleHRhcmVhXG4gICAgICAgIGNvbG9yIGluaGVyaXRcbiAgICAgICAgZm9udCBpbmhlcml0XG4gICAgICAgIG1hcmdpbiAwXG5cbiAgICBidXR0b25cbiAgICAgICAgb3ZlcmZsb3cgdmlzaWJsZVxuXG4gICAgYnV0dG9uXG4gICAgc2VsZWN0XG4gICAgICAgIHRleHQtdHJhbnNmb3JtIG5vbmVcblxuICAgIGJ1dHRvblxuICAgIGh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXVxuICAgIGlucHV0W3R5cGU9XCJyZXNldFwiXVxuICAgIGlucHV0W3R5cGU9XCJzdWJtaXRcIl1cbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlIGJ1dHRvblxuICAgICAgICBjdXJzb3IgcG9pbnRlclxuXG4gICAgYnV0dG9uW2Rpc2FibGVkXVxuICAgIGh0bWwgaW5wdXRbZGlzYWJsZWRdXG4gICAgICAgIGN1cnNvciBkZWZhdWx0XG5cbiAgICBidXR0b246Oi1tb3otZm9jdXMtaW5uZXJcbiAgICBpbnB1dDo6LW1vei1mb2N1cy1pbm5lclxuICAgICAgICBib3JkZXIgMFxuICAgICAgICBwYWRkaW5nIDBcblxuICAgIGlucHV0XG4gICAgICAgIGxpbmUtaGVpZ2h0IG5vcm1hbFxuXG4gICAgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdXG4gICAgaW5wdXRbdHlwZT1cInJhZGlvXCJdXG4gICAgICAgIGJveC1zaXppbmcgYm9yZGVyLWJveFxuICAgICAgICBwYWRkaW5nIDBcblxuICAgIGlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b25cbiAgICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uXG4gICAgICAgIGhlaWdodCBhdXRvXG5cbiAgICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdXG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZSB0ZXh0ZmllbGRcbiAgICAgICAgYm94LXNpemluZyBjb250ZW50LWJveFxuXG4gICAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbiAgICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uXG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZSBub25lXG5cbiAgICBmaWVsZHNldFxuICAgICAgICBib3JkZXIgMXB4IHNvbGlkICNjMGMwYzBcbiAgICAgICAgbWFyZ2luIDAgMnB4XG4gICAgICAgIHBhZGRpbmcgMC4zNWVtIDAuNjI1ZW0gMC43NWVtXG5cbiAgICBsZWdlbmRcbiAgICAgICAgYm9yZGVyIDBcbiAgICAgICAgcGFkZGluZyAwXG5cbiAgICB0ZXh0YXJlYVxuICAgICAgICBvdmVyZmxvdyBhdXRvXG5cbiAgICBvcHRncm91cFxuICAgICAgICBmb250LXdlaWdodCBib2xkXG5cbiAgICB0YWJsZVxuICAgICAgICBib3JkZXItY29sbGFwc2UgY29sbGFwc2VcbiAgICAgICAgYm9yZGVyLXNwYWNpbmcgMFxuXG4gICAgdGRcbiAgICB0aFxuICAgICAgICBwYWRkaW5nIDBcblxubm9ybWFsaXplID0ga3Mtbm9ybWFsaXplIHVubGVzcyBrcy1uby1jb25mbGljdFxuIiwiX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgIHJldHVybiBrcy1zdXBwb3J0LXNhZmFyaSA8PSA2IG9yIGtzLXN1cHBvcnQtYW5kcm9pZC1icm93c2VyIDw9IDQuMyBvciBrcy1zdXBwb3J0LWNocm9tZSA8PSAyMCBvciBrcy1zdXBwb3J0LWlvcy1zYWZhcmkgPD0gNi4xIG9yIGtzLXN1cHBvcnQtYmxhY2tiZXJyeS1icm93c2VyIDw9IDdcblxua3MtZGlzcGxheSggdmFsdWUsIGFyZ3MuLi4gKVxuICAgIGlmIHZhbHVlID09IGZsZXhcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgaWYgX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgICAgICAgICAgICAgIGRpc3BsYXkgLXdlYmtpdC1ib3ggYXJnc1xuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImZsZXhib3hcIiApXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4IGlzIFwid2Via2l0XCJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheSAtd2Via2l0LWZsZXggYXJnc1xuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1velwiXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgLW1vei1ib3ggYXJnc1xuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1zXCJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheSAtbXMtZmxleGJveCBhcmdzXG4gICAgICAgIGRpc3BsYXkgZmxleCBhcmdzXG4gICAgZWxzZSBpZiB2YWx1ZSA9PSBpbmxpbmUtZmxleFxuICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2UgYW5kICEoIGZsZXggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKSBhbmQgISggZmxleGJveCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIFwiZmxleGJveFwiIClcbiAgICAgICAgICAgICAgICBkaXNwbGF5IHVucXVvdGUoIFwiLVwiICsgcHJlZml4ICsgXCItaW5saW5lLWZsZXhcIiApIGFyZ3NcbiAgICAgICAgZGlzcGxheSBpbmxpbmUtZmxleCBhcmdzXG4gICAgZWxzZVxuICAgICAgICBkaXNwbGF5IHZhbHVlIGFyZ3NcblxuZGlzcGxheSA9IGtzLWRpc3BsYXkgdW5sZXNzIGtzLW5vLWNvbmZsaWN0XG5cbnVubGVzcyBrcy1uby1jb25mbGljdFxuICAgIGZsZXgtZ3JvdygpXG4gICAgICAgIGtzLXZlbmRvciggXCJmbGV4LWdyb3dcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBmbGV4LWJhc2lzKClcbiAgICAgICAga3MtdmVuZG9yKCBcImZsZXgtYmFzaXNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBmbGV4LWRpcmVjdGlvbiggdmFsdWUsIGFyZ3MuLi4gKVxuICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2UgYW5kICEoIGZsZXggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKSBhbmQgISggZmxleGJveCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBpZiBfa3Mtc3VwcG9ydC1vbGQtZmxleC1pbXBsZW1lbnRhdGlvbigpXG4gICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93XG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LW9yaWVudCB2ZXJ0aWNhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbiBub3JtYWwgYXJnc1xuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvdy1yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LW9yaWVudCB2ZXJ0aWNhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbiByZXZlcnNlIGFyZ3NcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50IGhvcml6b250YWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb24gbm9ybWFsIGFyZ3NcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW4tcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1vcmllbnQgaG9yaXpvbnRhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbiByZXZlcnNlIGFyZ3NcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1velwiIGFuZCBrcy1zdXBwb3J0LWZpcmVmb3ggPD0gMjBcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1vcmllbnQgdmVydGljYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtZGlyZWN0aW9uIG5vcm1hbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvdy1yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1vcmllbnQgdmVydGljYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtZGlyZWN0aW9uIHJldmVyc2UgYXJnc1xuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LW9yaWVudCBob3Jpem9udGFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWRpcmVjdGlvbiBub3JtYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW4tcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtb3JpZW50IGhvcml6b250YWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtZGlyZWN0aW9uIHJldmVyc2UgYXJnc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICAte3ByZWZpeH0tZmxleC1kaXJlY3Rpb24gdW5xdW90ZSggXCJyb3dcIiApIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC17cHJlZml4fS1mbGV4LWRpcmVjdGlvbiB1bnF1b3RlKCBcImNvbHVtblwiICkgYXJnc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAte3ByZWZpeH0tZmxleC1kaXJlY3Rpb24gdmFsdWUgYXJnc1xuICAgICAgICBpZiB2YWx1ZSBpcyByb3dcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uIHVucXVvdGUoIFwicm93XCIgKSBhcmdzXG4gICAgICAgIGVsc2UgaWYgdmFsdWUgaXMgY29sdW1uXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbiB1bnF1b3RlKCBcImNvbHVtblwiICkgYXJnc1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbiB2YWx1ZSBhcmdzXG5cbiAgICBmbGV4LWZsb3coIGRpciwgd3JhcCwgYXJncy4uLiApXG4gICAgICAgIGlmIGRpciBpcyByb3dcbiAgICAgICAgICAgIGRpciA9IHVucXVvdGUoIFwicm93XCIgKVxuICAgICAgICBpZiBkaXIgaXMgY29sdW1uXG4gICAgICAgICAgICBkaXIgPSB1bnF1b3RlKCBcImNvbHVtblwiIClcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImZsZXhib3hcIiApXG4gICAgICAgICAgICAgICAgLXtwcmVmaXh9LWZsZXgtZmxvdyBkaXIgd3JhcCBhcmdzXG4gICAgICAgIGZsZXgtZmxvdyBkaXIgd3JhcCBhcmdzXG5cbiAgICBmbGV4LXNocmluaygpXG4gICAgICAgIGtzLXZlbmRvciggXCJmbGV4LXNocmlua1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGZsZXgtd3JhcCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJmbGV4LXdyYXBcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBmbGV4KClcbiAgICAgICAga3MtdmVuZG9yKCBcImZsZXhcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBhbGlnbi1jb250ZW50KClcbiAgICAgICAga3MtdmVuZG9yKCBcImFsaWduLWNvbnRlbnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBhbGlnbi1pdGVtcyggdmFsdWUsIGFyZ3MuLi4gKVxuICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2UgYW5kICEoIGZsZXggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKSBhbmQgISggZmxleGJveCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBpZiBfa3Mtc3VwcG9ydC1vbGQtZmxleC1pbXBsZW1lbnRhdGlvbigpXG4gICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgZmxleC1zdGFydFxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1hbGlnbiBzdGFydCBhcmdzXG4gICAgICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpcyBmbGV4LWVuZFxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1hbGlnbiBlbmQgYXJnc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ24gdmFsdWUgYXJnc1xuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImZsZXhib3hcIiApXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4IGlzIFwibW96XCIgYW5kIGtzLXN1cHBvcnQtZmlyZWZveCA8PSAyMFxuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBmbGV4LXN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1hbGlnbiBzdGFydCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgdmFsdWUgaXMgZmxleC1lbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWFsaWduIGVuZCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWFsaWduIHZhbHVlIGFyZ3NcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIC17cHJlZml4fS1hbGlnbi1pdGVtcyB2YWx1ZSBhcmdzXG4gICAgICAgICAgICBhbGlnbi1pdGVtcyB2YWx1ZSBhcmdzXG5cbiAgICBhbGlnbi1zZWxmKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFsaWduLXNlbGZcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG4iLCJrcy1vdmVyZmxvdyggdmFsdWUsIGFyZ3MuLi4gKVxuICAgIGlmIHZhbHVlID09IGVsbGlwc2lzXG4gICAgICAgIHdoaXRlLXNwYWNlIG5vd3JhcFxuICAgICAgICB0ZXh0LW92ZXJmbG93IGVsbGlwc2lzXG4gICAgICAgIG92ZXJmbG93IGhpZGRlblxuICAgIGVsc2VcbiAgICAgICAgb3ZlcmZsb3cgdmFsdWUgYXJnc1xuXG5vdmVyZmxvdyA9IGtzLW92ZXJmbG93IHVubGVzcyBrcy1uby1jb25mbGljdFxuIiwia3MtdmVuZG9ycy1wcmVmaXhlcyA9IHJlY29tbWVuZGVkXG5cbmtzLXZlbmRvciggcHJvcGVydHksIHZhbHVlLCBmZWF0dXJlID0gbnVsbCwgcHJlZml4ZXMgPSBudWxsLCBvZmZpY2lhbCA9IHRydWUgKVxuICAgIHVubGVzcyBcInZlbmRvclwiIGluIGNhbGxlZC1mcm9tXG4gICAgICAgIGlmIGZlYXR1cmUgaXNudCBudWxsIGFuZCAhKCBmZWF0dXJlIGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggZmVhdHVyZSApXG4gICAgICAgICAgICAgICAgcHJlZml4ZWRwcm9wZXJ0eSA9IFwiLVwiICsgcHJlZml4ICsgXCItXCIgKyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIHtwcmVmaXhlZHByb3BlcnR5fTogdmFsdWVcbiAgICAgICAgZWxzZSBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2VcbiAgICAgICAgICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgcmVjb21tZW5kZWRcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ZXMgPSBrcy12ZW5kb3JzLXByZWZpeGVzXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4ZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBwcmVmaXhlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ZWRwcm9wZXJ0eSA9IFwiLVwiICsgcHJlZml4ICsgXCItXCIgKyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAge3ByZWZpeGVkcHJvcGVydHl9OiB2YWx1ZVxuICAgIGlmIG9mZmljaWFsXG4gICAgICAgIHtwcm9wZXJ0eX06IHZhbHVlXG5cbnZlbmRvciA9IGtzLXZlbmRvciB1bmxlc3Mga3Mtbm8tY29uZmxpY3RcblxudW5sZXNzIGtzLW5vLWNvbmZsaWN0XG4gICAgYW5pbWF0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZGVsYXkoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWRlbGF5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1kaXJlY3Rpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWRpcmVjdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZHVyYXRpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50KClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1pdGVyYXRpb24tY291bnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLW5hbWUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLW5hbWVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLXBsYXktc3RhdGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLXBsYXktc3RhdGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuXG4gICAgYXBwZWFyYW5jZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJhcHBlYXJhbmNlXCIsIGFyZ3VtZW50cywgcHJlZml4ZXM6IHdlYmtpdCBtb3ogKVxuXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJiYWNrZmFjZS12aXNpYmlsaXR5XCIsIGFyZ3VtZW50cywgcHJlZml4ZXM6IHdlYmtpdCBtcyApXG5cbiAgICBiYWNrZ3JvdW5kLWNsaXAoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYmFja2dyb3VuZC1jbGlwXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJiYWNrZ3JvdW5kLWltZy1vcHRzXCIgKVxuICAgIGJhY2tncm91bmQtb3JpZ2luKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJhY2tncm91bmQtb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJiYWNrZ3JvdW5kLWltZy1vcHRzXCIgKVxuICAgIGJhY2tncm91bmQtc2l6ZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJiYWNrZ3JvdW5kLXNpemVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJhY2tncm91bmQtaW1nLW9wdHNcIiApXG5cbiAgICBib3gtc2l6aW5nKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJveC1zaXppbmdcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzczMtYm94c2l6aW5nXCIgKVxuXG4gICAgYm9yZGVyLWltYWdlLXNvdXJjZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJib3JkZXItaW1hZ2Utc291cmNlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJib3JkZXItaW1hZ2VcIiApXG4gICAgYm9yZGVyLWltYWdlLXNsaWNlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1zbGljZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYm9yZGVyLWltYWdlXCIgKVxuICAgIGJvcmRlci1pbWFnZS13aWR0aCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJib3JkZXItaW1hZ2Utd2lkdGhcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2Utb3V0c2V0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1vdXRzZXRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2UtcmVwZWF0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1yZXBlYXRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2UoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm9yZGVyLWltYWdlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJib3JkZXItaW1hZ2VcIiApXG5cbiAgICBjbGlwLXBhdGgoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY2xpcC1wYXRoXCIsIGFyZ3VtZW50cywgcHJlZml4ZXM6IHdlYmtpdCApXG5cbiAgICBjb2x1bW4tY291bnQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLWNvdW50XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tZmlsbCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tZmlsbFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLWdhcCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tZ2FwXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tcnVsZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tcnVsZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLXJ1bGUtY29sb3IoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXJ1bGUtY29sb3JcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1ydWxlLXN0eWxlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1ydWxlLXN0eWxlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tcnVsZS13aWR0aCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tcnVsZS13aWR0aFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLXNwYW4oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXNwYW5cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIpXG4gICAgY29sdW1uLXdpZHRoKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi13aWR0aFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1ucygpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW5zXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcblxuICAgIGdyaWQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1hcmVhKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtYXJlYVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1hdXRvLWNvbHVtbnMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1hdXRvLWNvbHVtbnNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtYXV0by1mbG93KClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtYXV0by1mbG93XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWF1dG8tcG9zaXRpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1hdXRvLXBvc2l0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWF1dG8tcm93cygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWF1dG8tcm93c1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1jb2x1bW4oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1jb2x1bW5cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtY29sdW1uLWVuZCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWNvbHVtbi1lbmRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtY29sdW1uLXN0YXJ0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtY29sdW1uLXN0YXJ0XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXJvdygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXJvd1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1yb3ctZW5kKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtcm93LWVuZFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1yb3ctc3RhcnQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1yb3ctc3RhcnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtdGVtcGxhdGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC10ZW1wbGF0ZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhcygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXRlbXBsYXRlLWFyZWFzXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXRlbXBsYXRlLXJvd3MoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC10ZW1wbGF0ZS1yb3dzXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcblxuICAgIGh5cGhlbnMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiaHlwaGVuc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWh5cGhlbnNcIiApXG5cbiAgICBqdXN0aWZ5LWNvbnRlbnQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwianVzdGlmeS1jb250ZW50XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgbWFzaygpXG4gICAgICAgIGtzLXZlbmRvciggXCJtYXNrXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtbWFza3NcIiApXG5cbiAgICBvcGFjaXR5KCB2YWx1ZSApXG4gICAgICAgIGlmIHZhbHVlID09IGluaGVyaXQgb3IgdmFsdWUgPT0gaW5pdGlhbFxuICAgICAgICAgICAgLW1zLWZpbHRlciB2YWx1ZVxuICAgICAgICAgICAgZmlsdGVyIHZhbHVlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHZhbCA9IHJvdW5kKCB2YWx1ZSAqIDEwMCApXG4gICAgICAgICAgICBpZiB2YWwgPT0gMTAwXG4gICAgICAgICAgICAgICAgLW1zLWZpbHRlcjogbm9uZVxuICAgICAgICAgICAgICAgIGZpbHRlcjogbm9uZVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIC1tcy1maWx0ZXI6ICdcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PSVzKVwiJyAlIHZhbFxuICAgICAgICAgICAgICAgIGZpbHRlcjogJ2FscGhhKG9wYWNpdHk9JXMpJyAlIHZhbFxuICAgICAgICBvcGFjaXR5IHZhbHVlXG5cbiAgICBvcmRlcigpXG4gICAgICAgIGtzLXZlbmRvciggXCJvcmRlclwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIHBlcnNwZWN0aXZlKClcbiAgICAgICAgaWYgY3VycmVudC1wcm9wZXJ0eVsgMCBdIGlzIFwicGVyc3BlY3RpdmVcIlxuICAgICAgICAgICAga3MtdmVuZG9yKCBcInBlcnNwZWN0aXZlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zM2RcIiApXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHVucXVvdGUoIFwicGVyc3BlY3RpdmUoXCIgKyBhcmd1bWVudHMgKyBcIilcIiApXG5cbiAgICBwZXJzcGVjdGl2ZS1vcmlnaW4oKVxuICAgICAgICBrcy12ZW5kb3IoIFwicGVyc3BlY3RpdmUtb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zM2RcIiApXG5cbiAgICB0cmFuc2Zvcm0oKVxuICAgICAgICBrcy12ZW5kb3IoIFwidHJhbnNmb3JtXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zMmRcIiApXG4gICAgdHJhbnNmb3JtLW9yaWdpbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2Zvcm0tb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zMmRcIiApXG4gICAgdHJhbnNmb3JtLXN0eWxlKClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zZm9ybS1zdHlsZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwidHJhbnNmb3JtczNkXCIgKVxuXG4gICAgdHJhbnNpdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1kZWxheSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1wcm9wZXJ0eSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLXByb3BlcnR5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwidHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcbiIsImtzLWJveC1zaXppbmctcmVzZXQoKVxuICAgIGlmIHNlbGVjdG9yKCkgaXMgXCImXCJcbiAgICAgICAgaHRtbFxuICAgICAgICAgICAgYm94LXNpemluZyBib3JkZXItYm94XG5cbiAgICAgICAgKiwgKjpiZWZvcmUsICo6YWZ0ZXJcbiAgICAgICAgICAgIGJveC1zaXppbmcgaW5oZXJpdFxuICAgIGVsc2VcbiAgICAgICAgKiwgKjpiZWZvcmUsICo6YWZ0ZXJcbiAgICAgICAgICAgIGJveC1zaXppbmcgYm9yZGVyLWJveFxuXG5ib3gtc2l6aW5nLXJlc2V0ID0ga3MtYm94LXNpemluZy1yZXNldCB1bmxlc3Mga3Mtbm8tY29uZmxpY3RcbiIsIi8qKlxuICogUmVzZXRzIHRoZSBicm93c2VyIHNldHRpbmdzXG4gKi9cbiBcbm5vcm1hbGl6ZSgpXG5ib3gtc2l6aW5nLXJlc2V0KClcblxuaHRtbFxuYm9keVxuICBoZWlnaHQgMTAwJVxuICBiYWNrZ3JvdW5kIGdyZXktNTBcbiAgZm9udC1zaXplIGZvbnQtc2l6ZS1iYXNlXG4gIGZvbnQtZmFtaWx5IGZvbnQtZmFtaWx5LWJhc2VcbiAgY29sb3IgYmxhY2stdGV4dFxuICB0ZXh0LXJlbmRlcmluZyBvcHRpbWl6ZUxlZ2liaWxpdHlcbiAgLXdlYmtpdC1mb250LXNtb290aGluZyBhbnRpYWxpYXNlZFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3IgcmdiYSgwLCAwLCAwLCAwKVxuICBcbmhyXG4gIG1hcmdpbi10b3AgbGluZS1oZWlnaHQtY29tcHV0ZWRcbiAgbWFyZ2luLWJvdHRvbSBsaW5lLWhlaWdodC1jb21wdXRlZFxuICBtYXJnaW4tYm90dG9tIGxpbmUtaGVpZ2h0LWNvbXB1dGVkXG4gIGJvcmRlciAwXG4gIGJvcmRlci10b3AgMXB4IHNvbGlkIGdyZXktMjAwXG5cbmFcbiAgY3Vyc29yIHBvaW50ZXJcbiAgY29sb3IgYmx1ZVxuICB0ZXh0LWRlY29yYXRpb24gbm9uZVxuXG4gICY6aG92ZXJcbiAgJjpmb2N1c1xuICAgIGNvbG9yIGRhcmtlbihibHVlLCAxNSUpXG4gICAgXG5pbWdcbiAgbWF4LXdpZHRoIDEwMCUiLCIuY2ZcbiAgY2YoKVxuXG4uY2xlYXJmaXhcbiAgQGV4dGVuZCAuY2YiLCIvLyAuaGVhZGVyXG4vLyAgIEBleHRlbmQgLmNsZWFyZml4XG4vLyAgIHBhZGRpbmctdG9wIHJlbSgyMHB4KVxuLy8gICBoZWlnaHQgNTB2aFxuLy8gICB0ZXh0LWFsaWduIGNlbnRlclxuICBcbi8vIC5oZWFkZXJfX2xpbmVcbi8vICAgc2l6ZSAxMDAlIDVweFxuLy8gICBwb3NpdGlvbiBhYnNvbHV0ZVxuLy8gICB0b3AgMFxuLy8gICBiYWNrZ3JvdW5kIGFjY2VudFxuICBcbi8vIC5oZWFkZXJfX25hbWVcbi8vICAgcGFkZGluZyAwIHJlbSgxNnB4KVxuLy8gICBmb250IDMwMCByZW0oNjBweCkgZm9udC1mYW1pbHktYnJhbmRcbi8vICAgdGV4dC10cmFuc2Zvcm0gdXBwZXJjYXNlXG4vLyAgIGNvbG9yIGJsYWNrLXRleHRcbiAgXG4vLyAuaGVhZGVyX19pY29uXG4vLyAgIHBvc2l0aW9uIHJlbGF0aXZlXG4vLyAgIHRvcCAxMnB4XG4vLyAgIHNpemUgcmVtKDcwcHgpXG4vLyAgIHRyYW5zZm9ybSByb3RhdGUoMjcwZGVnKVxuICBcbi8vIC5oZWFkZXJfX2ljb24tLWxlZnRcbi8vICAgQGV4dGVuZCAuaGVhZGVyX19pY29uXG4vLyAgIHRyYW5zZm9ybSByb3RhdGUoOTBkZWcpXG4gICAgXG4vLyAuaGVhZGVyX19icmFuZCAqXG4vLyAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG5cbi8vIC5oZWFkZXJfX3RhZ2xpbmVcbi8vICAgZm9udCAxMDAgcmVtKDI1cHgpIGZvbnQtZmFtaWx5LXNhbnNcbiAgXG4vLyAuaGVhZGVyX19tZW51LWJ1dHRvblxuLy8gICBwb3NpdGlvbiBhYnNvbHV0ZVxuLy8gICBsZWZ0IDUlXG4vLyAgIHNpemUgcmVtKDQ4cHgpXG4vLyAgIHBhZGRpbmcgcmVtKDVweClcbi8vICAgYm9yZGVyLXJhZGl1cyA1MCVcbi8vICAgYm9yZGVyIDRweCBzb2xpZCBwcmltYXJ5XG4vLyAgIGZpbGwgcHJpbWFyeVxuLy8gICAmOmhvdmVyXG4vLyAgICAgY3Vyc29yIHBvaW50ZXJcbi8vICAgICBiYWNrZ3JvdW5kIHByaW1hcnlcbi8vICAgICBmaWxsIHdoaXRlIiwiLyoqXG4gKiBTdHlsZSBhbiBlbGVtZW50IGFzIGEgY29sdW1uIHdpdGggYSBndXR0ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gW3JhdGlvcz0xXSAtIEEgd2lkdGggcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lciBhcyBhIGZyYWN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBBIG9mZnNldCBzcGVjaWZpZWQgYXMgYSBmcmFjdGlvbiAoc2VlIHJhdGlvcykuXG4gKiBAcGFyYW0ge251bWJlcn0gW2N5Y2xlPTBdIC0gRWFzaWx5IGNyZWF0ZSBhbiBudGggY29sdW1uIGdyaWQgd2hlcmUgY3ljbGUgZXF1YWxzIHRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbdW5jeWNsZT0wXSAtIFVuZG8gYSBwcmV2aW91cyBjeWNsZSB2YWx1ZSB0byBhbGxvdyBmb3IgYSBuZXcgb25lLlxuICogQHBhcmFtIHtudW1iZXJ9IFtndXR0ZXI9amVldC5ndXR0ZXJdIC0gU3BlY2lmeSB0aGUgZ3V0dGVyIHdpZHRoIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgY29udGFpbmVycyB3aWR0aC5cbiAqL1xuY29sdW1uKHJhdGlvcyA9IDEsIG9mZnNldCA9IDAsIGN5Y2xlID0gMCwgdW5jeWNsZSA9IDAsIGd1dHRlciA9IGplZXQuZ3V0dGVyKVxuICBzaWRlID0gamVldC1nZXQtbGF5b3V0LWRpcmVjdGlvbigpXG4gIG9wcG9zaXRlLXNpZGUgPSBvcHBvc2l0ZS1wb3NpdGlvbihzaWRlKVxuICBjb2x1bW4td2lkdGhzID0gamVldC1nZXQtY29sdW1uKHJhdGlvcywgZ3V0dGVyKVxuICBtYXJnaW4tbGFzdCA9IDBcbiAgbWFyZ2luLWwgPSBtYXJnaW4tbGFzdFxuICBtYXJnaW4tciA9IGNvbHVtbi13aWR0aHNbMV1cblxuICB1bmxlc3Mgb2Zmc2V0ID09IDBcbiAgICBpZiBvZmZzZXQgPCAwXG4gICAgICBvZmZzZXQgKj0gLTFcbiAgICAgIG9mZnNldCA9IGplZXQtZ2V0LWNvbHVtbihvZmZzZXQsIGNvbHVtbi13aWR0aHNbMV0pWzBdXG4gICAgICBtYXJnaW4tciA9IG1hcmdpbi1sYXN0ID0gb2Zmc2V0ICsgY29sdW1uLXdpZHRoc1sxXSAqIDJcbiAgICBlbHNlXG4gICAgICBvZmZzZXQgPSBqZWV0LWdldC1jb2x1bW4ob2Zmc2V0LCBjb2x1bW4td2lkdGhzWzFdKVswXVxuICAgICAgbWFyZ2luLWwgPSBvZmZzZXQgKyBjb2x1bW4td2lkdGhzWzFdXG5cbiAgY2YoKVxuICBmbG9hdDogc2lkZVxuICBjbGVhcjogbm9uZVxuICB0ZXh0LWFsaWduOiBpbmhlcml0XG4gIHdpZHRoOiAoY29sdW1uLXdpZHRoc1swXSklXG4gIG1hcmdpbi17c2lkZX06IChtYXJnaW4tbCklXG4gIG1hcmdpbi17b3Bwb3NpdGUtc2lkZX06IChtYXJnaW4tciklXG5cbiAgaWYgdW5jeWNsZSAhPSAwXG4gICAgJjpudGgtY2hpbGQoe3VuY3ljbGV9bilcbiAgICAgIG1hcmdpbi17b3Bwb3NpdGUtc2lkZX06IChtYXJnaW4tciklXG4gICAgICBmbG9hdDogc2lkZVxuICAgICY6bnRoLWNoaWxkKHt1bmN5Y2xlfW4rMSlcbiAgICAgIGNsZWFyOiBub25lXG5cbiAgaWYgY3ljbGUgIT0gMFxuICAgICY6bnRoLWNoaWxkKHtjeWNsZX1uKVxuICAgICAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogKG1hcmdpbi1sYXN0KSVcbiAgICAgIGZsb2F0OiBvcHBvc2l0ZS1zaWRlXG4gICAgJjpudGgtY2hpbGQoe2N5Y2xlfW4rMSlcbiAgICAgIGNsZWFyOiBib3RoXG4gICBlbHNlXG4gICAgJjpsYXN0LWNoaWxkXG4gICAgICBtYXJnaW4te29wcG9zaXRlLXNpZGV9OiAobWFyZ2luLWxhc3QpJVxuXG4vKipcbiAqIEFuIGFsaWFzIGZvciB0aGUgY29sdW1uIG1peGluLlxuICovXG5jb2wgPSBjb2x1bW5cblxuLyoqXG4gKiBHZXQgdGhlIHdpZHRoIG9mIGEgY29sdW1uIGFuZCBub3RoaW5nIGVsc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3JhdGlvcz0xXSAtIEEgd2lkdGggcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lciBhcyBhIGZyYWN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtndXR0ZXI9amVldC5ndXR0ZXJdIC0gU3BlY2lmeSB0aGUgZ3V0dGVyIHdpZHRoIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgY29udGFpbmVycyB3aWR0aC5cbiAqL1xuY29sdW1uLXdpZHRoKHJhdGlvcyA9IDEsIGd1dHRlciA9IGplZXQuZ3V0dGVyKVxuICByZXR1cm4gamVldC1nZXQtY29sdW1uKHJhdGlvcywgZ3V0dGVyKVswXSArICclJ1xuXG4vKipcbiAqIEFuIGFsaWFzIGZvciB0aGUgY29sdW1uLXdpZHRoIGZ1bmN0aW9uLlxuICovXG5jdyA9IGNvbHVtbi13aWR0aFxuXG4vKipcbiAqIEdldCB0aGUgZ3V0dGVyIHNpemUgb2YgYSBjb2x1bW4gYW5kIG5vdGhpbmcgZWxzZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmF0aW9zPTFdIC0gQSB3aWR0aCByZWxhdGl2ZSB0byBpdHMgY29udGFpbmVyIGFzIGEgZnJhY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2d1dHRlcj1qZWV0Lmd1dHRlcl0gLSBTcGVjaWZ5IHRoZSBndXR0ZXIgd2lkdGggYXMgYSBwZXJjZW50YWdlIG9mIHRoZSBjb250YWluZXJzIHdpZHRoLlxuICovXG5jb2x1bW4tZ3V0dGVyKHJhdGlvcyA9IDEsIGd1dHRlciA9IGplZXQuZ3V0dGVyKVxuICByZXR1cm4gamVldC1nZXQtY29sdW1uKHJhdGlvcywgZ3V0dGVyKVsxXSArICclJ1xuXG4vKipcbiAqIEFuIGFsaWFzIGZvciB0aGUgY29sdW1uLWd1dHRlciBmdW5jdGlvbi5cbiAqL1xuY2cgPSBjb2x1bW4tZ3V0dGVyXG5cbi8qKlxuICogU3R5bGUgYW4gZWxlbWVudCBhcyBhIGNvbHVtbiB3aXRob3V0IGFueSBndXR0ZXJzIGZvciBhIHNlYW1sZXNzIHJvdy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmF0aW9zPTFdIC0gQSB3aWR0aCByZWxhdGl2ZSB0byBpdHMgY29udGFpbmVyIGFzIGEgZnJhY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEEgb2Zmc2V0IHNwZWNpZmllZCBhcyBhIGZyYWN0aW9uIChzZWUgcmF0aW9zKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbY3ljbGU9MF0gLSBFYXNpbHkgY3JlYXRlIGFuIG50aCBjb2x1bW4gZ3JpZCB3aGVyZSBjeWNsZSBlcXVhbHMgdGhlIG51bWJlciBvZiBjb2x1bW5zLlxuICogQHBhcmFtIHtudW1iZXJ9IFt1bmN5Y2xlPTBdIC0gVW5kbyBhIHByZXZpb3VzIGN5Y2xlIHZhbHVlIHRvIGFsbG93IGZvciBhIG5ldyBvbmUuXG4gKi9cbnNwYW4ocmF0aW8gPSAxLCBvZmZzZXQgPSAwLCBjeWNsZSA9IDAsIHVuY3ljbGUgPSAwKVxuICBzaWRlID0gamVldC1nZXQtbGF5b3V0LWRpcmVjdGlvbigpXG4gIG9wcG9zaXRlLXNpZGUgPSBvcHBvc2l0ZS1wb3NpdGlvbihzaWRlKVxuICBzcGFuLXdpZHRoID0gamVldC1nZXQtc3BhbihyYXRpbylcbiAgbWFyZ2luLXIgPSAwXG4gIG1hcmdpbi1sID0gbWFyZ2luLXJcblxuICB1bmxlc3Mgb2Zmc2V0ID09IDBcbiAgICBpZiBvZmZzZXQgPCAwXG4gICAgICBvZmZzZXQgKj0gLTFcbiAgICAgIG1hcmdpbi1yID0gamVldC1nZXQtc3BhbihvZmZzZXQpXG4gICAgZWxzZVxuICAgICAgbWFyZ2luLWwgPSBqZWV0LWdldC1zcGFuKG9mZnNldClcblxuICBjZigpXG4gIGZsb2F0OiBzaWRlXG4gIGNsZWFyOiBub25lXG4gIHRleHQtYWxpZ246IGluaGVyaXRcbiAgd2lkdGg6IChzcGFuLXdpZHRoKSVcbiAgbWFyZ2luLXtzaWRlfTogKG1hcmdpbi1sKSVcbiAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogKG1hcmdpbi1yKSVcblxuICBpZiBjeWNsZSAhPSAwXG4gICAgJjpudGgtY2hpbGQoe2N5Y2xlfW4pXG4gICAgICBmbG9hdDogb3Bwb3NpdGUtc2lkZVxuICAgICY6bnRoLWNoaWxkKHtjeWNsZX1uICsgMSlcbiAgICAgIGNsZWFyOiBib3RoXG5cbiAgaWYgdW5jeWNsZSAhPSAwXG4gICAgJjpudGgtY2hpbGQoe3VuY3ljbGV9bilcbiAgICAgIGZsb2F0OiBzaWRlXG4gICAgJjpudGgtY2hpbGQoe3VuY3ljbGV9biArIDEpXG4gICAgICBjbGVhcjogbm9uZVxuXG4vKipcbiAqIFJlb3JkZXIgY29sdW1ucyB3aXRob3V0IGFsdGVyaW5nIHRoZSBIVE1MLlxuICogQHBhcmFtIHtudW1iZXJ9IFtyYXRpb3M9MF0gLSBTcGVjaWZ5IGhvdyBmYXIgYWxvbmcgeW91IHdhbnQgdGhlIGVsZW1lbnQgdG8gbW92ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29sLW9yLXNwYW49Y29sdW1uXSAtIFNwZWNpZnkgd2hldGhlciB0aGUgZWxlbWVudCBoYXMgYSBndXR0ZXIgb3Igbm90LlxuICogQHBhcmFtIHtudW1iZXJ9IFtndXR0ZXI9amVldC5ndXR0ZXJdIC0gU3BlY2lmeSB0aGUgZ3V0dGVyIHdpZHRoIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgY29udGFpbmVycyB3aWR0aC5cbiAqL1xuc2hpZnQocmF0aW9zID0gMCwgY29sLW9yLXNwYW4gPSBjb2x1bW4sIGd1dHRlciA9IGplZXQuZ3V0dGVyKVxuICB0cmFuc2xhdGUgPSAnJ1xuICBzaWRlID0gamVldC1nZXQtbGF5b3V0LWRpcmVjdGlvbigpXG5cbiAgaWYgc2lkZSA9PSByaWdodFxuICAgIHJhdGlvcyA9IGplZXQtcmVwbGFjZS1udGgocmF0aW9zLCAwLCByYXRpb3NbMF0gKiAtMSlcblxuICBpZiBjb2wtb3Itc3BhbiA9PSBjb2x1bW4gb3IgY29sLW9yLXNwYW4gPT0gY29sIG9yIGNvbC1vci1zcGFuID09IGNcbiAgICBjb2x1bW4td2lkdGhzID0gamVldC1nZXQtY29sdW1uKHJhdGlvcywgZ3V0dGVyKVxuICAgIHRyYW5zbGF0ZSA9IGNvbHVtbi13aWR0aHNbMF0gKyBjb2x1bW4td2lkdGhzWzFdXG4gIGVsc2VcbiAgICB0cmFuc2xhdGUgPSBqZWV0LWdldC1zcGFuKHJhdGlvcylcblxuICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgbGVmdDogKHRyYW5zbGF0ZSklXG5cbi8qKlxuICogUmVzZXQgYW4gZWxlbWVudCB0aGF0IGhhcyBoYWQgc2hpZnQoKSBhcHBsaWVkIHRvIGl0LlxuICovXG51bnNoaWZ0KClcbiAgcG9zaXRpb246IHN0YXRpY1xuICBsZWZ0OiAwXG5cbi8qKlxuICogVmlldyB0aGUgZ3JpZCBhbmQgaXRzIGxheWVycyBmb3IgZWFzeSBkZWJ1Z2dpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yPWJsYWNrXSAtIFRoZSBiYWNrZ3JvdW5kIHRpbnQgYXBwbGllZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltcG9ydGFudD1mYWxzZV0gLSBXaGV0aGVyIHRvIGFwcGx5IHRoZSBzdHlsZSBhcyAhaW1wb3J0YW50LlxuICovXG5lZGl0KGNvbG9yID0gYmxhY2ssIGltcG9ydGFudCA9IGZhbHNlKVxuICBpZiBpbXBvcnRhbnRcbiAgICAqXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKGNvbG9yLCA1JSkgIWltcG9ydGFudFxuICBlbHNlXG4gICAgKlxuICAgICAgYmFja2dyb3VuZDogcmdiYShjb2xvciwgNSUpXG5cbi8qKlxuICogIEFsaWFzIGZvciBlZGl0KCkuXG4gKi9cbmRlYnVnID0gZWRpdFxuXG4vKipcbiAqIEhvcml6b250YWxseSBjZW50ZXIgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4LXdpZHRoPWplZXQubWF4LXdpZHRoXSAtIFRoZSBtYXggd2lkdGggdGhlIGVsZW1lbnQgY2FuIGJlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtwYWQ9MF0gLSBTcGVjaWZ5IHRoZSBlbGVtZW50J3MgbGVmdCBhbmQgcmlnaHQgcGFkZGluZy5cbiAqL1xuY2VudGVyKG1heC13aWR0aCA9IGplZXQubWF4LXdpZHRoLCBwYWQgPSAwKVxuICBjZigpXG4gIHdpZHRoOiBhdXRvXG4gIG1heC13aWR0aDogbWF4LXdpZHRoXG4gIGZsb2F0OiBub25lXG4gIGRpc3BsYXk6IHVucXVvdGUoJ2Jsb2NrJylcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvXG4gIG1hcmdpbi1sZWZ0OiBhdXRvXG4gIHBhZGRpbmctbGVmdDogcGFkXG4gIHBhZGRpbmctcmlnaHQ6IHBhZFxuXG4vKipcbiAqIFVuY2VudGVyIGFuIGVsZW1lbnQuXG4gKi9cbnVuY2VudGVyKClcbiAgbWF4LXdpZHRoOiBub25lXG4gIG1hcmdpbi1yaWdodDogMFxuICBtYXJnaW4tbGVmdDogMFxuICBwYWRkaW5nLWxlZnQ6IDBcbiAgcGFkZGluZy1yaWdodDogMFxuXG4vKipcbiAqIFN0YWNrIGFuIGVsZW1lbnQgc28gdGhhdCBub3RoaW5nIGlzIGVpdGhlciBzaWRlIG9mIGl0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtwYWQ9MF0gLSBTcGVjaWZ5IHRoZSBlbGVtZW50J3MgbGVmdCBhbmQgcmlnaHQgcGFkZGluZy5cbiAqIEBwYXJhbSB7Ym9sbGVhbi9zdHJpbmd9IFthbGlnbj1mYWxzZV0gLSBTcGVjaWZ5IHRoZSB0ZXh0IGFsaWduIGZvciB0aGUgZWxlbWVudC5cbiAqL1xuc3RhY2socGFkID0gMCwgYWxpZ24gPSBmYWxzZSlcbiAgc2lkZSA9IGplZXQtZ2V0LWxheW91dC1kaXJlY3Rpb24oKVxuICBvcHBvc2l0ZS1zaWRlID0gb3Bwb3NpdGUtcG9zaXRpb24oc2lkZSlcblxuICBkaXNwbGF5OiB1bnF1b3RlKCdibG9jaycpXG4gIGNsZWFyOiBib3RoXG4gIGZsb2F0OiBub25lXG4gIHdpZHRoOiAxMDAlXG4gIG1hcmdpbi1sZWZ0OiBhdXRvXG4gIG1hcmdpbi1yaWdodDogYXV0b1xuXG4gICY6Zmlyc3QtY2hpbGRcbiAgICBtYXJnaW4te3NpZGV9OiBhdXRvXG5cbiAgJjpsYXN0LWNoaWxkXG4gICAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogYXV0b1xuXG4gIGlmIHBhZCAhPSAwXG4gICAgcGFkZGluZy1sZWZ0OiBwYWRcbiAgICBwYWRkaW5nLXJpZ2h0OiBwYWRcblxuICBpZiAoYWxpZ24gaXMgbm90IGZhbHNlKVxuICAgIGlmIChhbGlnbiA9PSBjZW50ZXIpIG9yIChhbGlnbiA9PSBjKVxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyXG4gICAgaWYgKGFsaWduID09IGxlZnQpIG9yIChhbGlnbiA9PSBsKVxuICAgICAgdGV4dC1hbGlnbjogbGVmdFxuICAgIGlmIChhbGlnbiA9PSByaWdodCkgb3IgKGFsaWduID09IHIpXG4gICAgICB0ZXh0LWFsaWduOiByaWdodFxuXG4vKipcbiAqIFVuc3RhY2sgYW4gZWxlbWVudC5cbiAqL1xudW5zdGFjaygpXG4gIHNpZGUgPSBqZWV0LWdldC1sYXlvdXQtZGlyZWN0aW9uKClcbiAgb3Bwb3NpdGUtc2lkZSA9IG9wcG9zaXRlLXBvc2l0aW9uKHNpZGUpXG5cbiAgdGV4dC1hbGlnbjogc2lkZVxuICBkaXNwbGF5OiBpbmxpbmVcbiAgY2xlYXI6IG5vbmVcbiAgd2lkdGg6IGF1dG9cbiAgbWFyZ2luLWxlZnQ6IDBcbiAgbWFyZ2luLXJpZ2h0OiAwXG5cbiAgJjpmaXJzdC1jaGlsZFxuICAgIG1hcmdpbi17c2lkZX06IDBcblxuICAmOmxhc3QtY2hpbGRcbiAgICBtYXJnaW4te29wcG9zaXRlLXNpZGV9OiAwXG5cbi8qKlxuICogQ2VudGVyIGFuIGVsZW1lbnQgb24gZWl0aGVyIG9yIGJvdGggYXhlcy5cbiAqIEByZXF1aXJlcyBBIHBhcmVudCBjb250YWluZXIgd2l0aCByZWxhdGl2ZSBwb3NpdGlvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZGlyZWN0aW9uPWJvdGhdIC0gU3BlY2lmeSB3aGljaCBheGVzIHRvIGNlbnRlciB0aGUgZWxlbWVudCBvbi5cbiAqL1xuYWxpZ24oZGlyZWN0aW9uID0gYm90aClcbiAgcG9zaXRpb246IGFic29sdXRlXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2RcblxuICBpZiAoZGlyZWN0aW9uID09IGhvcml6b250YWwpIG9yIChkaXJlY3Rpb24gPT0gaClcbiAgICBsZWZ0OiA1MCVcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSlcbiAgZWxzZSBpZiAoZGlyZWN0aW9uID09IHZlcnRpY2FsKSBvciAoZGlyZWN0aW9uID09IHYpXG4gICAgdG9wOiA1MCVcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSlcbiAgZWxzZVxuICAgIHRvcDogNTAlXG4gICAgbGVmdDogNTAlXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSlcblxuLyoqXG4gKiBBcHBseSBhIGNsZWFyZml4IHRvIGFuIGVsZW1lbnQuXG4gKi9cbmNmKClcbiAgKnpvb206IDFcblxuICAmOmJlZm9yZSwgJjphZnRlclxuICAgIGNvbnRlbnQ6ICcnXG4gICAgZGlzcGxheTogdGFibGVcblxuICAmOmFmdGVyXG4gICAgY2xlYXI6IGJvdGhcbiIsImtzLWNsZWFyZml4KClcbiAgICBpZiBrcy1zdXBwb3J0LWllIDw9IDdcbiAgICAgICAgKnpvb20gMVxuICAgICY6YmVmb3JlXG4gICAgJjphZnRlclxuICAgICAgICBjb250ZW50IFwiIFwiXG4gICAgICAgIGRpc3BsYXkgdGFibGVcbiAgICAmOmFmdGVyXG4gICAgICAgIGNsZWFyIGJvdGhcblxuY2xlYXJmaXggPSBrcy1jbGVhcmZpeCB1bmxlc3Mga3Mtbm8tY29uZmxpY3Rcblxua3MtY2xlYXIoIHZhbHVlLCBhcmdzLi4uIClcbiAgICBpZiB2YWx1ZSA9PSBmaXhcbiAgICAgICAgY2xlYXJmaXgoKVxuICAgIGVsc2VcbiAgICAgICAgY2xlYXIgdmFsdWUgYXJnc1xuXG5jbGVhciA9IGtzLWNsZWFyIHVubGVzcyBrcy1uby1jb25mbGljdFxuXG5fa3MtZml4LXByb2Nlc3NpbmcoIGN1cnJlbnQtcHJvcGVydHkgKVxuICAgIGlmKCBjdXJyZW50LXByb3BlcnR5WyAwIF0gPT0gXCJjbGVhclwiIClcbiAgICAgICAgZml4XG4gICAgZWxzZVxuICAgICAgICBlcnJvciggXCJmaXgoKSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgY2xlYXIgcHJvcGVydHlcIiApXG5cbmtzLWZpeCgpXG4gICAgaWYoIGN1cnJlbnQtcHJvcGVydHkgKVxuICAgICAgICBfa3MtZml4LXByb2Nlc3NpbmcoIGN1cnJlbnQtcHJvcGVydHkgKVxuICAgIGVsc2VcbiAgICAgICAgZXJyb3IoIFwia3MtZml4KCkgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGNsZWFyIHByb3BlcnR5XCIgKVxuXG51bmxlc3Mga3Mtbm8tY29uZmxpY3RcbiAgICBmaXgoKVxuICAgICAgICBpZiggY3VycmVudC1wcm9wZXJ0eSApXG4gICAgICAgICAgICBfa3MtZml4LXByb2Nlc3NpbmcoIGN1cnJlbnQtcHJvcGVydHkgKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlcnJvciggXCJmaXgoKSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgY2xlYXIgcHJvcGVydHlcIiApXG4iLCIuY29udGFpbmVyXG4gIEBleHRlbmQgLmNsZWFyZml4XG4gIGNlbnRlcig5MCUpIiwiLm9mZmNhbnZhc1xuICBzaXplIHJlbSgzMDBweCkgMTAwJVxuICBwb3NpdGlvbiBmaXhlZFxuICB0b3AgMFxuICB6LWluZGV4IDRcbiAgYmFja2dyb3VuZCBhY2NlbnRcbiAgYm94LXNoYWRvdyBzaGFkb3ctejJcbiAgdHJhbnNmb3JtIHRyYW5zbGF0ZSgtMzAwcHgpXG4gIHRyYW5zaXRpb24gdHJhbnNmb3JtIC4ycyAkdHJhbnNpdGlvbi1iZXppZXI7XG4gIFxuICAmLS1vcGVuXG4gICAgQGV4dGVuZCAub2ZmY2FudmFzXG4gICAgdHJhbnNmb3JtIHRyYW5zbGF0ZSgwcHgpXG4gICAgdHJhbnNpdGlvbiB0cmFuc2Zvcm0gLjJzICR0cmFuc2l0aW9uLWJlemllcjtcbiIsInNpemUod2lkdGgsIGhlaWdodD13aWR0aClcbiAgd2lkdGggd2lkdGhcbiAgaGVpZ2h0IGhlaWdodCIsIi5oZWFkZXJcbiAgY2YoKVxuICBoZWlnaHQgMTAwdmhcbiAgYmFja2dyb3VuZCB3aGl0ZVxuICB0ZXh0LWFsaWduIGNlbnRlclxuICBiYWNrZ3JvdW5kIHVybChodHRwOi8vcWJrbC5uZXQvdGhlbWVmb3Jlc3QvY3VycmljdWx1bS9hc3NldHMvaW1nL2JhY2tzdHJldGNoLmpwZylcbiAgXG4uaGVhZGVyX19saW5lXG4gIHdpZHRoIDEwMCVcbiAgaGVpZ2h0IHJlbSgzcHgpXG4gIHBvc2l0aW9uIGZpeGVkXG4gIGJhY2tncm91bmQgcHJpbWFyeVxuICBcbi5oZWFkZXJfX2xvZ29cbiAgbWFyZ2luLXRvcCByZW0oNTBweClcbiAgXG4uaGVhZGVyX19uYW1lXG4gIG1hcmdpbi10b3AgcmVtKDEwcHgpXG4gIGZvbnQgODAwIHJlbSg2MHB4KSBmb250LWZhbWlseS1zYW5zXG4gIHRleHQtdHJhbnNmb3JtIHVwcGVyY2FzZVxuICBsZXR0ZXItc3BhY2luZyByZW0oM3B4KVxuICBsaW5lLWhlaWdodCA2cmVtXG4gIGNvbG9yIHdoaXRlXG4gIFxuLmhlYWRlcl9fc2VwYXJhdG9yXG4gIHdpZHRoIHJlbSgzMDBweClcbiAgaGVpZ2h0IHJlbSgycHgpXG4gIGRpc3BsYXkgYmxvY2tcbiAgbWFyZ2luIDAgYXV0b1xuICBiYWNrZ3JvdW5kIHdoaXRlXG4gIFxuLmhlYWRlcl9fbW90dG9cbiAgZm9udCAzMDAgcmVtKDMwcHgpIGZvbnQtZmFtaWx5LXNhbnNcbiAgbGluZS1oZWlnaHQgNXJlbVxuICBjb2xvciB3aGl0ZVxuICBcbi5tYWluLW1lbnVcbiAgd2lkdGggMTAwJVxuICBoZWlnaHQgcmVtKDYwcHgpXG4gIG1hcmdpbi10b3AgcmVtKC02MHB4KVxuICBiYWNrZ3JvdW5kIHByaW1hcnlcbiAgdGV4dC1hbGlnbiBjZW50ZXJcbiAgXG4gIHVsXG4gICAgbWFyZ2luIDBcbiAgICBsaXN0LXN0eWxlIG5vbmVcbiAgICBcbiAgbGlcbiAgICBwYWRkaW5nLWxlZnQgMjBweFxuICAgIGxpbmUtaGVpZ2h0IHJlbSg2MHB4KVxuICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG4gICAgXG4gIGFcbiAgICBsaW5lLWhlaWdodCByZW0oNjBweClcbiAgICBmb250IDUwMCByZW0oMTVweCkgZm9udC1mYW1pbHktc2Fuc1xuICAgIGxldHRlci1zcGFjaW5nIHJlbSgxLjVweClcbiAgICB0ZXh0LXRyYW5zZm9ybSB1cHBlcmNhc2VcbiAgICBjb2xvciB3aGl0ZSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */