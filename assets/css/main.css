html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}html{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;-moz-box-sizing:inherit;box-sizing:inherit}body{background:#fafafa;font-size:16px;font-family:"Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif;color:rgba(0,0,0,0.87);text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:rgba(0,0,0,0)}hr{margin-top:22px;margin-bottom:22px;margin-bottom:22px;border:0;border-top:1px solid #eee}a{cursor:pointer;color:#2196f3;text-decoration:none;}a:hover,a:focus{color:#0c81df}img{max-width:100%}.cf,.clearfix,.container,.header{*zoom:1;}.cf:before,.clearfix:before,.container:before,.header:before,.cf:after,.clearfix:after,.container:after,.header:after{content:'';display:table}.cf:after,.clearfix:after,.container:after,.header:after{clear:both}.container{*zoom:1;width:auto;max-width:90%;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.container:before,.container:after{content:'';display:table}.container:after{clear:both}.header{padding-top:1.25rem;height:100vh;text-align:center}.header__line{width:100%;height:5px;position:absolute;top:0;background:#8cc63f}.header__name{padding:0 1rem;font:300 2.5rem "Oswald","Roboto",Helvetica,Arial,sans-serif;text-transform:uppercase;color:rgba(0,0,0,0.87)}.header__icon,.header__icon--left{position:relative;top:12px;width:3.75rem;height:3.75rem;-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.header__icon--left{-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.header__brand *{display:inline-block}.header__tagline{font:100 1.25rem "Source Sans Pro","Roboto Slab",Helvetica,Arial,sans-serif}.header__menu{width:100%;height:3.75rem;margin-top:20px;background:#8cc63f;border-bottom:3px solid #7eb536}
/*# sourceMappingURL=data:application/json;base64, */